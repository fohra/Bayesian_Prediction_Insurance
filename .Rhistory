}
return(ret)
}
round(log_importance_weights(alpha, beta),2)
log_importance_weights <- function(alpha, beta){
num_draws <- length(alpha)
ret <- replicate(num_draws, 0)
for (i in 1:num_draws){
ret[i] <- bioassaylp(alpha[i], beta[i], bioassay$x, bioassay$y, bioassay$n)
}
return(ret)
}
round(log_importance_weights(alpha, beta),2)
normalized_importance_weights <- function(alpha = alpha, beta = beta){
ratios <- log_importance_weights(alpha, beta)
summed <- sum(ratios)
ret <- ratios/summed
return(ret)
}
normalized_importance_weights(alpha, beta)
normalized_importance_weights <- function(alpha = alpha, beta = beta){
ratios <- exp(log_importance_weights(alpha, beta))
summed <- sum(ratios)
ret <- ratios/summed
return(ret)
}
normalized_importance_weights(alpha, beta)
round(normalized_importance_weights(alpha, beta),3)
1/sum(normalized_importance_weights(alpha, beta)^2)
posterior_mean <- function(alpha = alpha, beta = beta){
weights <- normalized_importance_weights(alpha, beta)
values <- log_importance_weights(alpha, beta)
ret <- mean(weights * values)/mean(weights)
return(ret)
}
posterior_mean(alpha, beta)
posterior_mean <- function(alpha = alpha, beta = beta){
weights <- normalized_importance_weights(alpha, beta)
values <- exp(log_importance_weights(alpha, beta))
ret <- mean(weights * values)/mean(weights)
return(ret)
}
posterior_mean(alpha, beta)
posterior_mean <- function(alpha = alpha, beta = beta){
weights <- normalized_importance_weights(alpha, beta)
ret <- c(0, 0)
ret[1] <- mean(weights * alpha)/mean(weights)
ret[2] <- mean(weights * beta)/mean(weights)
return(ret)
}
posterior_mean(alpha, beta)
?dnorm
x<-seq(0,1)
x<-seq(0,1, 1000)
x<-seq(0,1, 1000)
?seq
x<-seq(0,1, length.out = 1000)
?dnorm
dnorm(x, mean = 100, sd = 34)
dist <- dnorm(x, mean = 100, sd = 34)
hist(dist)
x<-seq(80,120, length.out = 1000)
dist <- dnorm(x, mean = 100, sd = 34)
hist(dist)
?dnorm
dist <- rnorm(1000, mean = 100, sd = 34)
hist(dist)
hist(22*dist)
dist_mult <- 22*dist
len(dist_mult)
lenght(dist_mult)
length(dist_mult)
dist_pos<- dist_mult[dist_mult>0]
min(dist_pos)
dist_2k <- dist_mult[dist_mult>2000]
length(dist_2k)/length(dist_mult)
length(dist_2k)/length(dist_pos)
dist <- rnorm(100000, mean = 100, sd = 34)
hist(22*dist)
dist_mult <- 22*dist
length(dist_mult)
dist_pos<- dist_mult[dist_mult>0]
min(dist_pos)
dist_2k <- dist_mult[dist_mult>2000]
length(dist_2k)/length(dist_pos)
sqrt(var(dist))
sqrt(var(dist_mult))
22*dist
22*34
sqrt(var(dist))
sqrt(var(dist_mult))
22*34
library(aaltobda)
data('bioassay')
library(rstan)
bioassay
mu <- c(0,10)
Sigma <-  matrix(data=c(4,10,10,100),ncol = 2,nrow = 2)
data_bin<- list(N=4, n=bioassay$n, y=bioassay$y, mu=mu, Sigma=Sigma, x=bioassay$x)
fit_bin <- stan(file = 'C:/Users/Atte/Desktop/Bayesian Data Analysis/Assignment 6/binom.stan', data=data_bin)
fit_bin
draws <- as.data.frame(fit_bin)
hist(draws$`alpha[1]`)
hist(draws$`alpha[2]`)
hist(draws$lp__)
hist(exp(draws$lp__))
plot(draws$`alpha[1]`,draws$`alpha[2]`)
#b
monitor(fit_bin)
#a
c1<- draws$`alpha[1]`[1:1000]
c2<- draws$`alpha[1]`[1001:2000]
c3<- draws$`alpha[1]`[2001:3000]
c4<- draws$`alpha[1]`[3001:4000]
#a
c1<- as.dataframe(draws$`alpha[1]`[1:1000])
c2<- as.dataframe(draws$`alpha[1]`[1001:2000])
c3<- as.dataframe(draws$`alpha[1]`[2001:3000])
c4<- as.dataframe(draws$`alpha[1]`[3001:4000])
#a
c1<- as.data.frame(draws$`alpha[1]`[1:1000])
c2<- as.data.frame(draws$`alpha[1]`[1001:2000])
c3<- as.data.frame(draws$`alpha[1]`[2001:3000])
c4<- as.data.frame(draws$`alpha[1]`[3001:4000])
samples <- rbind(c1,c2,c3,c4)
samples <- rbind(c1,c2)
samples <- rbind(c1,c2,c3,c4)
samples <- cbind(c1,c2,c3,c4)
ggplot(samples, aes(length)) + geom_density(alpha = 0.2)
library(ggplot2)
data_df <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c(draws$`alpha[1]`[1:1000],draws$`alpha[1]`[1001:2000],draws$`alpha[1]`[2001:3000],draws$`alpha[1]`[3001:4000])
)
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
library(dplyr)
library(hrbrthemes)
data_df <- data.frame(
type = c( rep("variable 1", 1000), rep("variable 2", 1000) ),
value = c(draws$`alpha[1]`[1:1000],draws$`alpha[1]`[1001:2000],draws$`alpha[1]`[2001:3000],draws$`alpha[1]`[3001:4000])
)
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p <- data %>%
ggplot( aes(x=value, fill=type)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p <- data %>%
ggplot( aes(x=value)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
data_df <- data.frame(
value = c(draws$`alpha[1]`[1:1000],draws$`alpha[1]`[1001:2000],draws$`alpha[1]`[2001:3000],draws$`alpha[1]`[3001:4000])
)
p <- data %>%
ggplot( aes(x=value)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p <- data %>%
ggplot( aes(x=value)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p <- data %>%
ggplot( aes(x=value)) +
geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080"))
ggplot(data_df, aes(length, fill = veg)) + geom_density(alpha = 0.2)
ggplot(data_df, aes(length)) + geom_density(alpha = 0.2)
ggplot(data_df, ) + geom_density(alpha = 0.2)
ggplot(data_df) + geom_density(alpha = 0.2)
ggplot(data_df)
ggplot(data_df, aes(x=value))  +
geom_histogram()
c1$name <- 'c1'
c2$name <- 'c2'
c3$name <- 'c3'
c4$name <- 'c4'
#a
c1<- as.data.frame(draw = draws$`alpha[1]`[1:1000])
c2<- as.data.frame(draw = draws$`alpha[1]`[1001:2000])
c3<- as.data.frame(draw = draws$`alpha[1]`[2001:3000])
c4<- as.data.frame(draw = draws$`alpha[1]`[3001:4000])
c1$name <- 'c1'
c2$name <- 'c2'
c3$name <- 'c3'
c4$name <- 'c4'
#a
c1<- as.data.frame(length = draws$`alpha[1]`[1:1000])
c2<- as.data.frame(length = draws$`alpha[1]`[1001:2000])
c3<- as.data.frame(length = draws$`alpha[1]`[2001:3000])
c4<- as.data.frame(length = draws$`alpha[1]`[3001:4000])
carrots <- data.frame(length = rnorm(100000, 6, 2))
cukes <- data.frame(length = rnorm(50000, 7, 2.5))
#a
c1<- data.frame(length = draws$`alpha[1]`[1:1000])
c2<- data.frame(length = draws$`alpha[1]`[1001:2000])
c3<- data.frame(length = draws$`alpha[1]`[2001:3000])
c4<- data.frame(length = draws$`alpha[1]`[3001:4000])
c1$name <- 'c1'
c2$name <- 'c2'
c3$name <- 'c3'
c4$name <- 'c4'
samples <- rbind(c1,c2,c3,c4)
ggplot(samples, aes(length, fill = name)) + geom_density(alpha = 0.2)
comb<- matrix(data = c(c1,c2,c3,c4), nrow = 1000, ncol = 4, byrow = FALSE)
comb
c1<- length = draws$`alpha[1]`[1:1000]
c2<- length = draws$`alpha[1]`[1001:2000]
c3<- length = draws$`alpha[1]`[2001:3000]
c4<- length = draws$`alpha[1]`[3001:4000]
comb<- matrix(data = c(c1,c2,c3,c4), nrow = 1000, ncol = 4, byrow = FALSE)
c1<- draws$`alpha[1]`[1:1000]
c2<- draws$`alpha[1]`[1001:2000]
c3<- draws$`alpha[1]`[2001:3000]
c4<- draws$`alpha[1]`[3001:4000]
comb<- matrix(data = c(c1,c2,c3,c4), nrow = 1000, ncol = 4, byrow = FALSE)
comb
rstan::Rhat(comb)
#b
monitor(fit_bin)
c1<- draws$`alpha[2]`[1:1000]
c2<- draws$`alpha[2]`[1001:2000]
c3<- draws$`alpha[2]`[2001:3000]
c4<- draws$`alpha[2]`[3001:4000]
comb<- matrix(data = c(c1,c2,c3,c4), nrow = 1000, ncol = 4, byrow = FALSE)
comb
rstan::Rhat(comb)
#b
?rstan::monitor
#b
?rstan::Rhat
library(aaltobda)
data("drowning")
library(rstan)
install.packages("loo")
install.packages("loo")
library(loo)
library(aaltobda)
library(rstan)
library(loo)
data("factory")
sm <- rstan::stan_model(file = "C:/Users/Atte/Desktop/Bayesian Data Analysis/Assignment 8/stan_fact_sep.stan")
model <- rstan::sampling(sm, data = stan_data)
stan_data <- list(y = factory, N = nrow(factory), J = ncol(factory))
model <- rstan::sampling(sm, data = stan_data)
factory
sm <- rstan::stan_model(file = "C:/Users/Atte/Desktop/Bayesian Data Analysis/Assignment 8/stan_fact_sep.stan")
stan_data <- list(y = factory, N = nrow(factory), J = ncol(factory))
factory
model <- rstan::sampling(sm, data = stan_data)
model
?psis-loo
?psis
log_ratios <- -1 * example_loglik_array()
# get values out
draws_fact <- rstan::extract(model, permuted = T)
log_ratios <- draws_fact$log_lik
r_eff <- relative_eff(exp(-log_ratios))
r_eff <- loo::relative_eff(exp(-log_ratios))
loo:relative_eff()
?loo:relative_eff()
r_eff <- loo::relative_eff(exp(-log_ratios), chains = 1:4)
r_eff <- loo::relative_eff(exp(-log_ratios), chain_id = 1:4)
r_eff <- loo::relative_eff(exp(-log_ratios), chain_id = 1:4000)
r_eff <- loo::relative_eff(exp(-log_ratios))
log_ratios <- -1 * draws_fact$log_lik
r_eff <- loo::relative_eff(exp(-log_ratios))
psis_result <- psis(log_ratios, r_eff = r_eff)
r_eff <- loo::relative_eff(exp(-log_ratios), chain_id = 1:4000)
r_eff <- loo::relative_eff(exp(-log_ratios), chain_id = 1:4)
r_eff <- loo::relative_eff(exp(-log_ratios))
log_ratios <- draws_fact$log_lik
r_eff <- loo::relative_eff(exp(-log_ratios))
#r_eff <- loo::relative_eff(exp(-log_ratios))
psis_result <- psis(log_ratios)
#r_eff <- loo::relative_eff(exp(-log_ratios))
psis_result <- loo:psis(log_ratios)
#r_eff <- loo::relative_eff(exp(-log_ratios))
psis_result <- loo::psis(log_ratios)
str(psis_result)
plot(psis_result)
log_ratios <- draws_fact$log_lik
r_eff <- loo::relative_eff(exp(log_ratios))
r_eff <- loo::relative_eff(exp(log_ratios), cores=4)
r_eff <- loo::relative_eff(exp(log_ratios), cores=2)
r_eff <- loo::relative_eff(exp(log_ratios))
log_ratios <- extract_log_lik(model)
log_ratios <- loo::extract_log_lik(model)
log_ratios <- draws_fact$log_lik
log_ratios <- loo::extract_log_lik(model)
r_eff <- loo::relative_eff(exp(log_ratios))
model
log_ratios <- draws_fact$log_lik
log_ratios
log_ratios <- loo::extract_log_lik(model)
log_ratios <- loo::extract_log_lik(model)
r_eff <- loo::relative_eff(exp(log_ratios))
model
tail(log_ratios)
library(aaltobda)
library(rstan)
library(loo)
#get data
data("factory")
stan_data <- list(y = factory, N = nrow(factory), J = ncol(factory))
#compile stan code to cpp
sm <- rstan::stan_model(file = "C:/Users/Atte/Desktop/Bayesian Data Analysis/Assignment 8/stan_fact_sep.stan")
#sample values
model <- rstan::sampling(sm, data = stan_data)
model
# get values out
draws_fact <- rstan::extract(model, permuted = T)
log_ratios <- loo::extract_log_lik(model, merge_chains = FALSE)
r_eff <- loo::relative_eff(exp(log_ratios))
psis_result <- loo::psis(log_ratios)
psis_result <- loo::psis(log_ratios, r_eff)
psis_result <- loo::psis(log_ratios, r_eff= r_eff)
str(psis_result)
plot(psis_result)
psis_result
help('pareto-k-diagnostic')
pareto_k_table(psis_result)
loo::pareto_k_table(psis_result)
sum(psis_result$diagnostics$pareto_k)
str(psis_result)
psis_result
psis_result <- loo::loo(log_ratios, r_eff= r_eff)
log_ratios <- loo::extract_log_lik(model, merge_chains = FALSE)
r_eff <- loo::relative_eff(exp(log_ratios))
psis_result <- loo::loo(log_ratios, r_eff= r_eff)
str(psis_result)
plot(psis_result)
psis_result
install.packages(c("rstan", "rstudioapi"))
install.packages("colorspace")
remotes::install_version(“withr”, “2.2.0”)
remotes::install_version("withr", "2.2.0")
install.packages("remotes")
remotes::install_version("withr", "2.2.0")
#Sets the working directory the folder where the script is
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#load libraries, functions and data
source("data/preprocess.R")
library(e1071)
data <- read.csv("data/insurance.csv")
data <- preprocess(data)
data
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, insurance=data$charges)
data_list
# BMI
bmi_mean <- mean(data$bmi)
bmi_var <- var(data$bmi)
bmi_skew <- skewness(data$bmi)
bmi_kurt <- kurtosis(data$bmi)
print(bmi_mean)
print(bmi_var)
print(bmi_skew)
print(bmi_kurt)
hist(data$bmi, breaks=20)
#Create model [Hierarchial]
sm_hierarchial <- rstan::stan_model(file = "stan_codes/stan_hierarchial.stan")
install.packages(rstan)
install.packages("rstan")
install.packages("rstan")
#Create model [Hierarchial]
sm_hierarchial <- rstan::stan_model(file = "stan_codes/stan_hierarchial.stan")
model_hierarchial <- rstan::sampling(sm_hierarchial, data = data_list)
model_hierarchial
draws_fact_hierarchial <- rstan::extract(model_hierarchial, permuted = T)
draws_hierarchial <- as.data.frame(model_hierarchial)
par(mfrow=c(2,2))
hist(draws_fact_hierarchial$age, breaks=20)
hist(draws_fact_hierarchial$sex, breaks=20)
hist(draws_fact_hierarchial$bmi, breaks=20)
hist(draws_fact_hierarchial$smoker, breaks=20)
hist(draws_fact_hierarchial$insurance, breaks=20)
main <- function(data, model_path){
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, insurance=data$charges)
# BMI
bmi_mean <- mean(data$bmi)
bmi_var <- var(data$bmi)
bmi_skew <- skewness(data$bmi)
bmi_kurt <- kurtosis(data$bmi)
hist(data$bmi, breaks=20)
#Create model
sm_hierarchial <- rstan::stan_model(file = model_path)
model_hierarchial <- rstan::sampling(sm_hierarchial, data = data_list)
print(model_hierarchial)
draws_fact_hierarchial <- rstan::extract(model_hierarchial, permuted = T)
draws_hierarchial <- as.data.frame(model_hierarchial)
par(mfrow=c(2,2))
hist(draws_fact_hierarchial$age, breaks=20)
hist(draws_fact_hierarchial$sex, breaks=20)
hist(draws_fact_hierarchial$bmi, breaks=20)
hist(draws_fact_hierarchial$smoker, breaks=20)
hist(draws_fact_hierarchial$insurance, breaks=20)
}
main(data, "stan_codes/stan_hierarchial.stan")
library(e1071)
library(rstan)
data <- read.csv("data/insurance.csv")
data <- preprocess(data)
main <- function(data, model_path){
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, insurance=data$charges)
# BMI
bmi_mean <- mean(data$bmi)
bmi_var <- var(data$bmi)
bmi_skew <- skewness(data$bmi)
bmi_kurt <- kurtosis(data$bmi)
hist(data$bmi, breaks=20)
#Create model
sm_hierarchial <- rstan::stan_model(file = model_path)
model_hierarchial <- rstan::sampling(sm_hierarchial, data = data_list)
print(model_hierarchial)
draws_fact_hierarchial <- rstan::extract(model_hierarchial, permuted = T)
draws_hierarchial <- as.data.frame(model_hierarchial)
par(mfrow=c(2,2))
hist(draws_fact_hierarchial$age, breaks=20)
hist(draws_fact_hierarchial$sex, breaks=20)
hist(draws_fact_hierarchial$bmi, breaks=20)
hist(draws_fact_hierarchial$smoker, breaks=20)
hist(draws_fact_hierarchial$insurance, breaks=20)
}
main(data, "stan_codes/stan_hierarchial.stan")
model <- load("stan_codes/stan_hierarchial.rds")
model <- readRDS("stan_codes/stan_hierarchial.rds")
hopo <- rstan::sampling(model, data = data_list)
?rstan
?stan_model
#Sets the working directory the folder where the script is
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(e1071)
library(aaltobda)
library(rstan)
library(ggplot2)
library(dplyr)
library(tidyr)
rstan_options(auto_write = TRUE)
options(mc.cores = 4)
library(loo)
library(gridExtra)
library(rprojroot)
library(rstanarm)
#load libraries, functions and data
source("data/preprocess.R")
source("data/loo_diagnostics.R")
data <- read.csv("data/insurance.csv")
data <- preprocess(data)
main <- function(data, model_path, test=FALSE, lin_reg=FALSE){
#Awful if-else statements included so that fast test run can be run
if (test){
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, y=data$charges, xpred = 25)
}
else if (lin_reg){
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, y=data$charges,
pred_age = 25, pred_sex=1, pred_bmi=20, pred_smoker=1)
}
else{
data_list <- list(N = nrow(data), age = data$age, sex=data$sex, bmi=data$bmi, smoker=data$smoker, insurance=data$charges)
}
#Create model
sm <- rstan::stan_model(file = model_path)
model <- rstan::sampling(sm, data = data_list)
print(model)
draws <- rstan::extract(model, permuted = T)
if (test){
par(mfrow=c(2,2))
hist(draws$alpha, breaks=20)
hist(draws$beta, breaks=20)
hist(draws$sigma, breaks=20)
hist(draws$mu, breaks=20)
par(mfrow=c(1,1))
hist(draws$ypred, breaks=20)
}
else if (lin_reg){
par(mfrow=c(2,3))
hist(draws$alpha, breaks=20)
hist(draws$beta_age, breaks=20)
hist(draws$beta_sex, breaks=20)
hist(draws$beta_bmi, breaks=20)
hist(draws$beta_smoker, breaks=20)
hist(draws$sigma, breaks=20)
par(mfrow=c(1,2))
hist(draws$mu, breaks=20)
hist(draws$ypred, breaks=20)
}
else{
par(mfrow=c(2,2))
hist(draws$age, breaks=20)
hist(draws$sex, breaks=20)
hist(draws$bmi, breaks=20)
hist(draws$smoker, breaks=20)
par(mfrow=c(1,1))
hist(draws$insurance, breaks=20)
parameter_name = 'log_lik_insurance'
loo_diagnostics(model, parameter_name)
}
}
main(data, "stan_codes/stan_lin_reg_uni.stan", lin_reg = TRUE)
